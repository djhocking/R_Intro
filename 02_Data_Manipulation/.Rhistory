QIC <- (-2)*quasi.R + 2*trace.R
QICu <- (-2)*quasi.R + 2*px    # Approximation assuming model structured correctly
output <- c(QIC, QICu, quasi.R, trace.R, px)
names(output) <- c('QIC', 'QICu', 'Quasi Lik', 'Trace', 'px')
return(output)
}
QIC(gee5)
sapply(list(gee1, gee2, gee3), function(x) QIC(x))
sapply(list(gee1, gee2, gee3, gee4, gee5), function(x) QIC(x))
?sapply
sapply(list(gee1, gee2, gee3, gee4, gee5), QIC)
?response
model.R <- gee3
model.indep <- update(model.R, corstr = "independence")
mu.R <- model.R$fitted.values
y <- model.R$y
type <- family(model.R)$family
quasi.R <- function(type, y){
switch(type,
poisson = sum((y*log(mu.R)) - mu.R),
gaussian = sum(((y - mu.R)^2)/-2),
binomial = sum(y*log(mu.R/(1 - mu.R)) + log(1 - mu.R)),
stop("Error: distribution not recognized"))
}
quasi.R
?switch
switch(type,
poisson = sum((y*log(mu.R)) - mu.R),
gaussian = sum(((y - mu.R)^2)/-2),
binomial = sum(y*log(mu.R/(1 - mu.R)) + log(1 - mu.R)),
stop("Error: distribution not recognized"))
?family
type
omegaI <- ginv(model.indep$geese$vbeta.naiv) # Omega-hat(I) via Moore-Penrose generalized inverse of a matrix in MASS package
omegaI
Vr <- model.R$geese$vbeta
trace.R <- sum(diag(omegaI %*% Vr))
trace.R
length(y)
length(mu.R)
?unmarked
library(unmarked)
?unmarked
?geepack
?geeglm
?geese
memory.limit()
??memory
memory.profile()
Hares$density
hares <- read.table('/Users/Dan/Documents/Statistics/Kery-WinBUGS/hares.data.txt', header = TRUE)
attach(hares)
aggregate(mean.density, by = list(region, landuse), FUN = mean, na.rm = TRUE)
table(region, landuse)
# Write model
sink("model.txt")
cat("
model {
# Priors
for (i in 1:2){
for(j in 1:8) {
group.mean[i,j] ~ dnorm(0, 0.0001)
}
}
sigma ~ dunif(0, 100)
# Likelihood
for (i in 1:n) {
mean.density[i] ~ dnorm(mean[i], tau)
mean[i] <- group.mean[landuse[i], region[i]]
}
# Derived quantities
tau <- 1 / ( sigma * sigma)
for(j in 1:8){
diff.density[j] <- group.mean[1,j] - group.mean[2,j]
}
}
",fill=TRUE)
sink()
# Bundle data
win.data <- list(mean.density=mean.density, region = as.numeric(region), landuse = as.numeric(landuse),
n = length(mean.density))
# Inits function
inits <- function(){list(sigma = rlnorm(1) )}
# Parameters to estimate
params <- c("group.mean", "sigma", "diff.density")
# MCMC settings
ni <- 6000
nb <- 2000
nt <- 2
nc <- 3
# Start Gibbs sampling
out <- jags(win.data, inits, params, "model.txt", n.thin=nt, n.chains=nc, n.burnin=nb, n.iter=ni)
library(R2jags)
out <- jags(win.data, inits, params, "model.txt", n.thin=nt, n.chains=nc, n.burnin=nb, n.iter=ni)
print(out, dig = 3)
n.landuse
head(hares)
set.seed(12345)
x <- rnorm(10, 2)
x <- rnorm(100, 10, 2)
set.seed(12345)
x <- rnorm(100, 10, 2)
x
?model.matrix
model.matrix(~ x + x2)
ap = 5
bp = 2
bp2 = 3
set.seed(12345)
x <- rnorm(10, 10, 2)
x2 <- rnorm(10, 3, 1)
xs <- (x - mean(x)/sd(x))
x2s <- (x2 - mean(x2)/sd(x2))
model.matrix(~ x + x2)
y <- ap + bp*xs + bp2*x2s
y
(b <- (bp/sd(x) + x))
(b <- (bp/sd(x) + mean(x)))
(b2 <- (bp2/sd(x2) + mean(x2)))
(y <- ap + b*x + b2*x2)
sd(x2)
(b <- (bp*sd(x) + mean(x)))
(b2 <- (bp2*sd(x2) + mean(x2)))
(y <- ap + b*x + b2*x2)
(b <- bp*xs/x)
xs
xs
x
xs/x
(b <- bp*xs/x)
(b2 <- bp2*x2s/x2)
(y <- ap + b*x + b2*x2)
b
x
yp <- ap + bp*xs + bp2*x2s
(y <- ap + b*x + b2*x2)
y <- array(0, c(195, 6))
for(j in 1:195){
for(k in 1:6){
y[j,k] <- (rbinom(1, N[j], p[1,j,k]))
}
}
foo <- runif(50, 1, 195)
bar <- runif(50, 1, 6)
for(i in 1:50){
y[foo[i], bar[i]] <- NA
}
y.new[is.na(y)] <- NA
p <- array(runif(3000*195*6, 0, 1), c(3000, 195, 6))
N <- array(rpois(3000*195, 10), c(3000, 195))
eval <- array(NA, c(3000, 195, 6))
E <- array(NA, c(3000, 195, 6))
E.new <- array(NA, c(3000, 195, 6))
y.new <- array(NA, c(195, 6))
load("/Users/Dan/Documents/Research/SmokysElevation/Analysis/Analysis2012-JAGS.RData")
summary(fm.list)
print(out.m1.od2$BUGSoutput$summary[1:195, c(1,2,3,7,8,9)], dig = 3)
plot(out.m1.od2$BUGSoutput$sims.list$alpha.lam, out.m1.od2$BUGSoutput$sims.list$alpha.p)
source('~/Documents/Research/SmokysElevation/Analysis/Analysis2012-JAGS.R')
install.packages('devtools') library(devtools) install_github('rbison',
install.packages('devtools')
library(devtools)
install_github('rbison', 'ropensci')
library(rbison)
install(/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip)
install(Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip)
install(/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip)
install('/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip')
install('Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip')
devtools::install('Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip')
devtools::install('/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip')
devtools::install(/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip)
devtools::install(Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip)
library(devtools)
?install
devtools::install("/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip")
devtools::install("/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5.zip")
devtools::install("/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5")
library(rbison)
install.packages('ggplots2')
library(ggplots2)
install.packages('ggplot2')
library(ggplot2)
devtools::install("/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5") # for mac on my network needed to download and unzip then install local file - didn't work because not all dependecies contain OX X binary package tarball
library(rbison)
PCIN <- bison(species = "Plethodon cinereus", type = "scientific_name")
bison_data(PCIN)
class(PCIN)
str(PCIN)
bison_data(PCIN)
head(bison_data(input = PCIN, datatype = "counties"))
PCIN <- bison(species = "Plethodon cinereus", type = "scientific_name", start=0, count=10)
class(PCIN)
str(PCIN)
bison_data(PCIN)
PCIN <- bison(species = "Plethodon cinereus", type = "scientific_name", start=0, count=2)
class(PCIN)
str(PCIN)
bison_data(PCIN)
PCIN
PCIN <- bison(species = "Plethodon cinereus", type = "scientific_name", start=0, count=1)
class(PCIN)
str(PCIN)
bison_data(PCIN)
BBIS <- bison(species = "Bison bison", type = "scientific_name", start=0, count=1)
class(BBIS)
str(BBIS)
bison_data(BBIS)
head(bison_data(input = BBIS, datatype = "counties"))
sessionInfo()
install_github('rbison', 'ropensci') # Error: http client error (403)
devtools::install("/Users/Dan/Documents/Statistics/R/ropensci-rbison-1f222c5") # for mac on my network needed to download and unzip then install local file - didn't work because not all dependecies contain OX X binary package tarball - worked once ggplot was installed and loaded
library(rbison)
PCIN <- bison(species = "Plethodon cinereus", type = "scientific_name", start=0, count=1)
class(PCIN)
str(PCIN)
bison_data(PCIN)
devtools::install("/Users/Dan/Documents/Statistics/R/rbison-master")
library(rbison)
PCIN <- bison(species = "Plethodon cinereus", type = "scientific_name", start=0, count=1)
class(PCIN)
str(PCIN)
bison_data(PCIN)
rm(bison)
rm('bison')
detach("package:rbison", unload=TRUE)
remove.packages("rbison")
devtools::install("/Users/Dan/Documents/Statistics/R/rbison-master")
library(rbison)
PCIN <- bison(species = "Plethodon cinereus", type = "scientific_name", start=0, count=1)
class(PCIN)
str(PCIN)
bison_data(PCIN)
?bison
?bison_data
install.packages('geepack')
library(geepack)
?geeglm
?geepack
?zcor
load("/Users/Dan/Dropbox/CountData/Harmonic-GLMM-GEE.RData")
Count$date
library(rgdal)
install.packages('rgdal')
Data <- read.table('/Users/Dan/Dropbox/Lab-Weather-Query.csv', sep = ',', header = TRUE)
?read.table
Data <- read.table('/Users/Dan/Dropbox/Lab-Weather-Query.csv', sep = ',', header = TRUE)
Data <- read.table('/Users/Dan/Dropbox/Lab-Weather-Query.csv', sep = ',', header = TRUE, na.strings = '')
Data <- read.table('/Users/Dan/Dropbox/Lab-Weather-Querytest.csv', sep = ',', header = TRUE, na.strings = '')
Data <- read.table('/Users/Dan/Dropbox/Lab-Weather-Query.csv', sep = ',', header = TRUE)
summary(Data)
library(lme4)
str(Data)
glmer(formula = SVL ~ Rain.cm + RHpct + TempC + ~1|Year, data = Data)
?glmer
glmer(formula = SVL ~ Rain.cm + RHpct + TempC + ~1|Year, data = Data, family = gausian)
?family
glmer(formula = SVL ~ Rain.cm + RHpct + TempC + ~1|Year, data = Data, family = gaussian)
glmer(formula = SVL ~ Rain.cm + RHpct + TempC + (1|Year) + (1|Plot), data = Data, family = gaussian)
Data <- read.table('/Users/Dan/Dropbox/Lab-Weather-Query.csv', sep = ',', header = TRUE)
glmer(formula = SVL ~ Rain + RHpct + TempC + (1|Year) + (1|Plot), data = Data, family = gaussian)
LMM1 <- glmer(formula = SVL ~ Rain + RHpct + TempC + (1|Year) + (1|Plot), data = Data, family = gaussian)
summary(LMM1)
library(nlme)
?lme
LMM1 <- lme(SVL ~ Rain + RHpct + TempC, data = Data, random = ~1|Plot)
LMM1 <- lme(SVL ~ Rain + RHpct + TempC, data = Data, random = ~1|Plot, na.action = na.rm)
LMM1 <- lme(SVL ~ Rain + RHpct + TempC, data = Data, random = ~1|Plot, na.action = na.omit)
summary(LMM1)
summary(Data$Plot)
LMM2 <- lme(SVL ~ Rain, data = Data, random = ~1|Plot, na.action = na.omit)
summary(LMM2)
plot(Data$Year, Data$SVL)
boxplot(Data$Year, Data$SVL)
boxplot(SVL ~ Year, data = Data)
library(maps)
library(maproj)
library(mapproj)
pi
dist.euclid
NYC.lat <- 40.6700
NYC.lon <- -73.9400
LA.lat <- 34.0500
LA.lon <- -118.2500
# Convert to Radians
NYC.lat.rad <- NYC.lat*pi/180
NYC.lon.rad <- NYC.lon*pi/180
LA.lat.rad <- LA.lat*pi/180
LA.lat.rad <- LA.lat*pi/180
LA.lon.rad <- LA.lon*pi/180
dist.euclid <- sqrt((NYC.lat.rad - LA.lat.rad)^2 + (NYC.lon.rad - LA.lon.rad)^2)
dist.euclid
sqrt((NYC.lat - LA.lat)^2 + (NYC.lon - LA.lon)^2)
?cos
3678*acos(sin(NYC.lat.rad)*sin(LA.lat.rad) + cos(NYC.lat.rad)*cos(LA.lat.rad)*cos(NYC.lon.rad - LA.lon.rad))
acos(sin(NYC.lat.rad)*sin(LA.lat.rad) + cos(NYC.lat.rad)*cos(LA.lat.rad)*cos(NYC.lon.rad - LA.lon.rad))
dist.euclid.rad <- sqrt((NYC.lat.rad - LA.lat.rad)^2 + (NYC.lon.rad - LA.lon.rad)^2)
dist.euclid <- sqrt((NYC.lat - LA.lat)^2 + (NYC.lon - LA.lon)^2)
dist.euclid.rad*3678
111.2*sqrt((NYC.lat - LA.lat)^2 + (NYC.lon - LA.lon)^2)
dist.geo <- 3678*acos(sin(NYC.lat.rad)*sin(LA.lat.rad) + cos(NYC.lat.rad)*cos(LA.lat.rad)*cos(NYC.lon.rad - LA.lon.rad))
dist.geo
SD <- function(X) {
x.mean <- mean(X)
std.dev <- (X - x.mean)/(length(X)^0.5)
}
X <- seq(1,10)
X
SD <- function(X) {
x.mean <- mean(X)
std.dev <- (X - x.mean)/(length(X)^0.5)
}
X1 <- seq(1,10)
SD(X1)
SD <- function(X) {
x.mean <- mean(X)
std.dev <- (X - x.mean)/(length(X)^0.5)
return(std.dev)
}
X1 <- seq(1,10)
SD(X1)
rm(SD)
rm(X)
rm(X1)
install.packages('knitr')
library(knitr)
library(unmarked)
?colext
R <- 4 # number of sites
J <- 3 # number of secondary sampling occasions
T <- 2 # number of primary periods
y <- matrix(c(
1,1,0,  0,0,0,
0,0,0,  0,0,0,
1,1,1,  1,1,0,
1,0,1,  0,0,1), nrow=R, ncol=J*T, byrow=TRUE)
y
site.covs <- data.frame(x1=1:4, x2=factor(c('A','B','A','B')))
site.covs
yearly.site.covs <- list(
year = matrix(c(
'year1', 'year2',
'year1', 'year2',
'year1', 'year2',
'year1', 'year2'), nrow=R, ncol=T, byrow=TRUE)
)
yearly.site.covs
obs.covs <- list(
x4 = matrix(c(
-1,0,1,  -1,1,1,
-2,0,0,  0,0,2,
-3,1,0,  1,1,2,
0,0,0,   0,1,-1), nrow=R, ncol=J*T, byrow=TRUE),
x5 = matrix(c(
'a','b','c',  'a','b','c',
'd','b','a',  'd','b','a',
'a','a','c',  'd','b','a',
'a','b','a',  'd','b','a'), nrow=R, ncol=J*T, byrow=TRUE))
obs.covs
umf <- unmarkedMultFrame(y=y, siteCovs=site.covs,
yearlySiteCovs=yearly.site.covs, obsCovs=obs.covs,
numPrimary=2)                  # organize data
umf                                # look at data
summary(umf)                       # summarize
fm <- colext(~1, ~1, ~1, ~1, umf)  # fit a model
fm
fm <- colext(~x1 + x2, ~year, ~year, ~x4 + x5, umf)  # fit a model
summary(umf)                       # summarize
fm <- colext(~x1 + x2, ~1, ~1, ~x4 + x5, umf)  # fit a model
fm
x1p <- rnorm(100, 0, 1)
x2p <- rnorm(100, 0, 1)
pred.matrix <- array(NA, dim = c(100, 100)) # Predict for 100 x 100 matrix
for(i in 1:100){
for(j in 1:100){
newData <- data.frame(x1=x1p[i], x2=x2p[j])
pred <- predict(fm26B, type="state", newdata=newData)
for(i in 1:100){
for(j in 1:100){
newData <- data.frame(x1=x1p[i], x2=x2p[j])
pred <- predict(fm, type="state", newdata=newData)
pred.matrix[i, j] <- pred$Predicted
}
}
?unmarked::predict
?predict
pred <- predict(fm, type="psi", newdata=newData)
pred <- predict(fm, type="state", newdata=newData)
for(i in 1:100){
for(j in 1:100){
newData <- data.frame(x1=x1p[i], x2=x2p[j])
pred <- predict(fm, type="psi", newdata=newData)
pred.matrix[i, j] <- pred$Predicted
}
?}
pred.matrix <- array(NA, dim = c(100, 100)) # Predict for 100 x 100 matrix
for(i in 1:100){
for(j in 1:100){
newData <- data.frame(x1=x1p[i], x2=x2p[j])
pred <- predict(fm, type="psi", newdata=newData)
pred.matrix[i, j] <- pred$Predicted
}
}
LA.lon <- -118.2500
# Problem 1
library(maps)
library(mapproj)
library(knitr)
# From Google
# NYC = 40.6700° N, 73.9400° W
# LA = 34.0500° N, 118.2500° W
# Seattle (Sea) = 47.6097° N, 122.3331° W
NYC.lat <- 40.6700
NYC.lon <- -73.9400
LA.lat <- 34.0500
LA.lon <- -118.2500
Sea.lat <- 47.6097
Sea.lon <- -122.3331
# Convert to Radians
NYC.lat.rad <- NYC.lat*pi/180
NYC.lon.rad <- NYC.lon*pi/180
LA.lat.rad <- LA.lat*pi/180
LA.lon.rad <- LA.lon*pi/180
Sea.lat.rad <- Sea.lat*pi/180
Sea.lon.rad <- Sea.lon*pi/180
8 + 5
Sea.lat
install.packages("knitr")
?install.packages
?knitr
?Knitr
?knitr-package
?markdown
install.packages('pander') # best if have pandoc installed on computer
library(pander)
?read.table
3^3
powerXY <- function(x, y = 2) {
xy <- x ^ y
return(xy)
}
powerXY
powerXY(3, 3)
powerXY(3)
x2 <- c(1, 2, 3, 4, 5)
powerXY(x2, y1)
3^3
powerXY <- function(x, y = 2) {
xy <- x ^ y
return(xy)
}
powerXY
powerXY(x1, y1)
x1 <- 3
y1 <- 3
powerXY(x1, y1)
powerXY(x1)
powerXY(x2, y1)
setwd("C:\\Users\\asdavis1.UIUC\\Documents\\Current Work\\Experimental Work\\Data\\PZM\\2013\\Quality control")
x <- 1
x
powerXY <- function(x, y = 2) {
xy <- x ^ y
return(xy)
}
powerXY(x=1, y=2)
setwd(/Users/Dan/Documents/Teaching/Rinfo/)
setwd("/Users/Dan/Documents/Teaching/Rinfo/")
setwd("/Users/Dan/Documents/Teaching/Rinto/")
setwd("/Users/Dan/Documents/Teaching/Rintro/")
setwd("/Users/Dan/Documents/Teaching/R_intro/")
install.packages('lattice')
library(lattice)
#####II. Data import & error checking
pzm <- read.table("PZM Dataframe_IL.txt",header=T)
pzm <- read.table("SeedTrtment_Litter_R.txt",header=T)
?data.frame
a <- c('one', 'two', 'three', 'four')
b <- c(1, 2, 3, 4)
c <- c(1.1, 2.2, 3.3, 4.4)
data <- data.frame(c(a, b, c))
str(data)
data <- data.frame(cbind(a, b, c))
str(data)
summary(data)
str(b)
data <- data.frame(a, b, c)
str(data)
summary(data)
data[ , 1]
data$a
data[ ,c('a')
data[['a']]
data[ ,c('a')]
data[['a']]
?seq
d <- seq(from = 100, to = 200, length.out = 4)
(e <- seq(100, 200, lenth.out = 4))
(e <- seq(100, 200, length.out = 4))
e[2]
e[3]
e[3] + 0.000002
print(e[3], dig = 10)
e[3]
(e3 <- e[3] + 0.000002)
print(e[3], dig = 10)
print(e3, dig = 10)
print(e3, dig = 100)
data$f <- seq(100, 175, by = 25)
data$f <- rep(NA, times = 4)
rep(NA, times = 4)
head(data)
